# A workflow to run an image scan, translated from a Jenkinsfile
name: Run GCP Image Scan

on:
  # This section replaces the Jenkins 'parameters' block
  # It allows you to run the workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      IMAGE_NAME_TO_SCAN:
        description: 'The full name of the Docker image to scan'
        required: true
        default: 'webgoat/webgoat'
      GCP_PROJECT_ID:
        description: 'GCP Project ID for authentication'
        required: true
        default: 'cispoc'
      ORGANIZATION_ID:
        description: 'Your GCP Organization ID'
        required: true
        default: '714470867684'
      CONNECTOR_ID:
        description: 'The ID for your pipeline connector'
        required: true
        default: 'organizations/714470867684/locations/global/connectors/aaa-keep'
      SCANNER_IMAGE:
        description: 'The Docker image that contains your scanner script'
        required: true
        default: 'us-central1-docker.pkg.dev/ci-plugin/ci-images/scc-artifactguard-scan-image:latest'
      IMAGE_TAG:
        description: 'The Docker image version'
        required: true
        default: 'latest'
      IGNORE_SERVER_ERRORS:
        description: 'Ignore server errors'
        required: false
        type: boolean
        default: false

jobs:
  # This job contains the translated 'Image Analysis' stage
  image-analysis:
    runs-on: ubuntu-latest
    steps:
      # 1. Authenticate to Google Cloud (replaces 'withCredentials' and gcloud auth)
      - name: Authenticate to GCP
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # 2. Set up the gcloud CLI
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ inputs.GCP_PROJECT_ID }}

      # 3. Configure Docker for GCR
      - name: Configure Docker
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      # 4. Image Scan
      - name: 'Run Image Analysis Scan'
        # Only run if authentication succeeded
        if: steps.auth.outcome == 'success'
        run: |
          echo "üì¶ Running container from scanner image..."

          # Determine values: Use manual inputs if available, otherwise use env defaults
          SCANNER_IMAGE="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SCANNER_IMAGE || env.SCANNER_IMAGE }}"
          GCP_PROJECT_ID="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.GCP_PROJECT_ID || env.GCP_PROJECT_ID }}"
          ORGANIZATION_ID="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ORGANIZATION_ID || env.ORGANIZATION_ID }}"
          IMAGE_NAME="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.IMAGE_NAME_TO_SCAN || env.IMAGE_NAME_TO_SCAN }}"
          IMAGE_TAG="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.IMAGE_TAG || env.IMAGE_TAG }}"
          CONNECTOR_ID="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.CONNECTOR_ID || env.CONNECTOR_ID }}"
          IGNORE_ERRORS="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.IGNORE_SERVER_ERRORS || (env.IGNORE_SERVER_ERRORS == 'true') }}"

          exit_code=0

          # Run docker, mounting the credentials file created by the 'auth' step
          # and setting GCLOUD_KEY_PATH for your container's script.
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ steps.auth.outputs.credentials_file_path }}:/tmp/scc-key.json \
            -e GCLOUD_KEY_PATH=/tmp/scc-key.json \
            -e GCP_PROJECT_ID="${GCP_PROJECT_ID}" \
            -e ORGANIZATION_ID="${ORGANIZATION_ID}" \
            -e IMAGE_NAME="${IMAGE_NAME}" \
            -e IMAGE_TAG="${IMAGE_TAG}" \
            -e CONNECTOR_ID="${CONNECTOR_ID}" \
            -e RUN_ID="${{ github.workflow }}" \
            "${SCANNER_IMAGE}" \
            || exit_code=$?

          echo "Docker run finished with exit code: $exit_code"

          # --- Replicate Jenkins Exit Code Logic ---
          if [ $exit_code -eq 0 ]; then
            echo "‚úÖ Evaluation succeeded: Conformant image."
          elif [ $exit_code -eq 1 ]; then
            echo "‚ùå Scan failed: Non-conformant image (vulnerabilities found)."
            exit 1 # Fail the step
          else
            if [ "$IGNORE_ERRORS" = "true" ]; then
              echo "‚ö†Ô∏è Server/internal error occurred (Code: $exit_code), but IGNORE_SERVER_ERRORS=true. Proceeding."
            else
              echo "‚ùå Server/internal error occurred (Code: $exit_code) during evaluation. Set IGNORE_SERVER_ERRORS=true to override."
              exit 1 # Fail the step
            fi
          fi
