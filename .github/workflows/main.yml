# A workflow to run an image scan, translated from a Jenkinsfile
name: Run GCP Image Scan

on:
  # This section replaces the Jenkins 'parameters' block
  # It allows you to run the workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      IMAGE_NAME_TO_SCAN:
        description: 'The full name of the Docker image to scan'
        required: true
        default: 'webgoat/webgoat'
      GCP_PROJECT_ID:
        description: 'GCP Project ID for authentication'
        required: true
        default: 'cispoc'
      ORGANIZATION_ID:
        description: 'Your GCP Organization ID'
        required: true
        default: '714470867684'
      CONNECTOR_ID:
        description: 'The ID for your pipeline connector'
        required: true
        default: 'organizations/714470867684/locations/global/connectors/privatepreviewdemo'
      SCANNER_IMAGE:
        description: 'The Docker image that contains your scanner script'
        required: true
        default: 'us-central1-docker.pkg.dev/ci-plugin/ci-images/scc-artifactguard-scan-image:latest'
      IMAGE_TAG:
        description: 'The Docker image version'
        required: true
        default: 'latest'

jobs:
  # This job contains the translated 'Image Analysis' stage
  image-analysis:
    runs-on: ubuntu-latest
    steps:
      # 1. Authenticate to Google Cloud (replaces 'withCredentials' and gcloud auth)
      - name: Authenticate to GCP
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # 2. Set up the gcloud CLI
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ inputs.GCP_PROJECT_ID }}

      # 3. Configure Docker for GCR
      - name: Configure Docker
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      # 4. This step contains the main script logic from your Jenkinsfile
      - name: Create, Run, and Clean Up Scanner Container
        run: |
          echo "ðŸ“¦ Creating container from SBOM scanner image: ${{ inputs.SCANNER_IMAGE }}"
          
          # Create the container and store its ID
          container_id=$(docker create \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e GCP_PROJECT_ID="${{ inputs.GCP_PROJECT_ID }}" \
            -e ORGANIZATION_ID="${{ inputs.ORGANIZATION_ID }}" \
            -e IMAGE_NAME="${{ inputs.IMAGE_NAME_TO_SCAN }}" \
            -e IMAGE_TAG="${{ inputs.IMAGE_TAG }}" \
            -e CONNECTOR_ID="${{ inputs.CONNECTOR_ID }}" \
            -e BUILD_TAG="${{ github.workflow }}" \
            -e BUILD_ID="${{ github.run_number }}" \
            -e GCLOUD_KEY_PATH="/tmp/scc-key.json" \
            ${{ inputs.SCANNER_IMAGE }})

          echo "ðŸ“¤ Copying service account key into container..."
          # The auth action saves the key to a temporary file; we copy it from there
          docker cp "${{ steps.auth.outputs.credentials_file_path }}" "$container_id:/tmp/scc-key.json"

          echo "ðŸš€ Starting container to scan: ${{ inputs.IMAGE_NAME_TO_SCAN }}"
          docker start -a "$container_id"

          echo "ðŸ§¹ Cleaning up container..."
          docker rm "$container_id"
